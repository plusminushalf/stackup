"use strict";(self.webpackChunk_stackupfinance_docs=self.webpackChunk_stackupfinance_docs||[]).push([[521],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),g=a,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||i;return t?r.createElement(m,s(s({ref:n},p),{},{components:t})):r.createElement(m,s({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3150:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=t(7896),a=t(1461),i=(t(7294),t(3905)),s=["components"],o={sidebar_position:2},l="Wallet",c={unversionedId:"packages/client-sdk/api/wallet",id:"packages/client-sdk/api/wallet",title:"Wallet",description:"A fully fledged SCW implementation. This will be custom to each and every type of smart contract wallet that can exist. But it MUST extend AAWallet described below.",source:"@site/docs/packages/client-sdk/api/wallet.md",sourceDirName:"packages/client-sdk/api",slug:"/packages/client-sdk/api/wallet",permalink:"/docs/packages/client-sdk/api/wallet",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/packages/client-sdk/api/wallet.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Provider",permalink:"/docs/packages/client-sdk/api/provider"},next:{title:"Signer",permalink:"/docs/packages/client-sdk/api/signer"}},p={},d=[{value:"AAWallet",id:"aawallet",level:3}],u={toc:d};function g(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"wallet"},"Wallet"),(0,i.kt)("p",null,"A fully fledged SCW implementation. This will be custom to each and every type of smart contract wallet that can exist. But it ",(0,i.kt)("em",{parentName:"p"},"MUST")," extend ",(0,i.kt)("inlineCode",{parentName:"p"},"AAWallet")," described below."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"aawallet"},"AAWallet"),(0,i.kt)("p",null,"An instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"AAWallet")," exposes methods to help users sign ",(0,i.kt)("inlineCode",{parentName:"p"},"UserOperation")," & connect this signer to ",(0,i.kt)("inlineCode",{parentName:"p"},"Contract")," class in ethers js."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"class AAWallet implements Signer {\n  /**\n   * create account abstraction signer\n   * @param signer - the underlying signer, underlying signer can be an EOA or any other method used to sign, it must be of a type AASigner.\n   * @param provider - index of this wallet for this signer.\n   */\n  constructor(readonly signer: AASigner, readonly provider = signer.provider);\n\n  /**\n   * used to get address of deployed SCW\n   */\n  getAddress: () => Promise<string>;\n\n  /**\n   * Signs userOperation\n   * This uses the signer set above to sign the operation\n   */\n  signUserOperation: (userOp: UserOperation) => Promise<string>;\n\n  /**\n   * send simple transaction using SCW (it internally will create a userOp & use sendUserOperation)\n   */\n  sendTransaction: (\n    transaction: TransactionRequest\n  ) => Promise<TransactionResponse>;\n\n  /**\n   * sends transaction using provider.sendUserOperation() set in the constructor\n   * Also uses signUserOperation if signature is undefined.\n   */\n  sendUserOperation: (userOp: UserOperation) => Promise<TransactionResponse>;\n\n  /**\n   * Exposes the current nounce - can be used by Paymaster Services to get nounce & sign the paymasterData\n   */\n  getNonce: () => BigNumberish;\n\n  /*\n   * InitCode of the wallet, can be used by paymaster if isDeployed returns false.\n   */\n  getInitCode: () => BytesLike;\n\n  /**\n   * isDeployed -> tells if the wallet has been deployed or not\n   */\n  isDeployed: () => Boolean;\n\n  /**\n   *  Verification gas needed by this wallet\n   */\n  getVerificationGas: () => BigNumberish;\n\n  /**\n   * This just calls provider to get entryPoint specific pre-verification gas\n   */\n  getPreVerificationGas: () => BigNumberish;\n}\n")))}g.isMDXComponent=!0}}]);