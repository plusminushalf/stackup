"use strict";(self.webpackChunk_stackupfinance_docs=self.webpackChunk_stackupfinance_docs||[]).push([[94],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(t),f=i,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return t?r.createElement(m,a(a({ref:n},l),{},{components:t})):r.createElement(m,a({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8787:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>p,metadata:()=>c,toc:()=>d});var r=t(7896),i=t(1461),o=(t(7294),t(3905)),a=["components"],p={sidebar_position:1},s="Provider",c={unversionedId:"packages/client-sdk/api/provider",id:"packages/client-sdk/api/provider",title:"Provider",description:"A connection to an ERC-4337 bundler node.",source:"@site/docs/packages/client-sdk/api/provider.md",sourceDirName:"packages/client-sdk/api",slug:"/packages/client-sdk/api/provider",permalink:"/stackup/docs/packages/client-sdk/api/provider",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/packages/client-sdk/api/provider.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/stackup/docs/category/api"},next:{title:"Wallet",permalink:"/stackup/docs/packages/client-sdk/api/wallet"}},l={},d=[{value:"AARpcProvider",id:"aarpcprovider",level:3},{value:"Initialize",id:"initialize",level:2}],u={toc:d};function f(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"provider"},"Provider"),(0,o.kt)("p",null,"A connection to an ERC-4337 bundler node."),(0,o.kt)("p",null,"An instance of a ",(0,o.kt)("inlineCode",{parentName:"p"},"AARpcProvider")," is an abstraction to support the following RPC methods as outlined in the EIP:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"eth_sendUserOperation")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"eth_supportedEntryPoints"))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"aarpcprovider"},"AARpcProvider"),(0,o.kt)("p",null,"An instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"AARpcProvider")," exposes methods to help get your ",(0,o.kt)("inlineCode",{parentName:"p"},"UserOperation")," to an ERC-4337 client."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class AARpcProvider extends JsonRpcProvider {\n  // URL string to ERC-4337 client node.\n  url: string;\n\n  // Chain ID of the EVM network ops are intended for.\n  // See https://chainlist.org\n  chainId: BigNumberish;\n\n  /**\n   * @param url - Bundler url, an endpoint which supports eth_sendUserOperation & eth_supportedEntryPoints\n   * @param index - index of the entryPoint to use by default, default value: 0\n   * @param network - network information to which this bundler will be conencting to\n   */\n  constructor(\n    url: ConnectionInfo | string,\n    index?: number,\n    network?: Networkish\n  );\n\n  /**\n   * @param userOp - a fully fleged user operation\n   * @param entryPoint - an optional entryPoint param, if not given default entrypoint configured in constructor will be used\n   */\n  sendUserOperation: (userOp: UserOperation) => Promise<TransactionResponse>;\n\n  supportedEntryPoints: () => Promise<Array<string>>;\n\n  getDefaultEntryPoint: () => Promise<EntryPoint__factory>;\n\n  getPreVerificationGas: () => BigNumberish;\n}\n\ntype SupportedEntryPointsResult = Array<string>;\n")),(0,o.kt)("h2",{id:"initialize"},"Initialize"),(0,o.kt)("p",null,"One instance should be initialized for each node and network your application supports."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const client = new AARpcProvider(url, 0, chainId);\n")))}f.isMDXComponent=!0}}]);